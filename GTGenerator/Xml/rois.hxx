// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XML_ROIS_HXX
#define XML_ROIS_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class gtrois;
class frame;
class roi;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class gtrois: public ::xml_schema::type
{
  public:
  // frame
  //
  typedef ::frame frame_type;
  typedef ::xsd::cxx::tree::sequence< frame_type > frame_sequence;
  typedef frame_sequence::iterator frame_iterator;
  typedef frame_sequence::const_iterator frame_const_iterator;
  typedef ::xsd::cxx::tree::traits< frame_type, char > frame_traits;

  const frame_sequence&
  frame () const;

  frame_sequence&
  frame ();

  void
  frame (const frame_sequence& s);

  // fversion
  //
  typedef ::xml_schema::string fversion_type;
  typedef ::xsd::cxx::tree::optional< fversion_type > fversion_optional;
  typedef ::xsd::cxx::tree::traits< fversion_type, char > fversion_traits;

  const fversion_optional&
  fversion () const;

  fversion_optional&
  fversion ();

  void
  fversion (const fversion_type& x);

  void
  fversion (const fversion_optional& x);

  void
  fversion (::std::auto_ptr< fversion_type > p);

  // algorithm
  //
  typedef ::xml_schema::string algorithm_type;
  typedef ::xsd::cxx::tree::optional< algorithm_type > algorithm_optional;
  typedef ::xsd::cxx::tree::traits< algorithm_type, char > algorithm_traits;

  const algorithm_optional&
  algorithm () const;

  algorithm_optional&
  algorithm ();

  void
  algorithm (const algorithm_type& x);

  void
  algorithm (const algorithm_optional& x);

  void
  algorithm (::std::auto_ptr< algorithm_type > p);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // video_name
  //
  typedef ::xml_schema::string video_name_type;
  typedef ::xsd::cxx::tree::optional< video_name_type > video_name_optional;
  typedef ::xsd::cxx::tree::traits< video_name_type, char > video_name_traits;

  const video_name_optional&
  video_name () const;

  video_name_optional&
  video_name ();

  void
  video_name (const video_name_type& x);

  void
  video_name (const video_name_optional& x);

  void
  video_name (::std::auto_ptr< video_name_type > p);

  // padding_px
  //
  typedef ::xml_schema::int_ padding_px_type;
  typedef ::xsd::cxx::tree::optional< padding_px_type > padding_px_optional;
  typedef ::xsd::cxx::tree::traits< padding_px_type, char > padding_px_traits;

  const padding_px_optional&
  padding_px () const;

  padding_px_optional&
  padding_px ();

  void
  padding_px (const padding_px_type& x);

  void
  padding_px (const padding_px_optional& x);

  // Constructors.
  //
  gtrois ();

  gtrois (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  gtrois (const gtrois& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual gtrois*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  gtrois&
  operator= (const gtrois& x);

  virtual 
  ~gtrois ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  frame_sequence frame_;
  fversion_optional fversion_;
  algorithm_optional algorithm_;
  name_optional name_;
  video_name_optional video_name_;
  padding_px_optional padding_px_;
};

class frame: public ::xml_schema::type
{
  public:
  // roi
  //
  typedef ::roi roi_type;
  typedef ::xsd::cxx::tree::sequence< roi_type > roi_sequence;
  typedef roi_sequence::iterator roi_iterator;
  typedef roi_sequence::const_iterator roi_const_iterator;
  typedef ::xsd::cxx::tree::traits< roi_type, char > roi_traits;

  const roi_sequence&
  roi () const;

  roi_sequence&
  roi ();

  void
  roi (const roi_sequence& s);

  // no
  //
  typedef ::xml_schema::int_ no_type;
  typedef ::xsd::cxx::tree::optional< no_type > no_optional;
  typedef ::xsd::cxx::tree::traits< no_type, char > no_traits;

  const no_optional&
  no () const;

  no_optional&
  no ();

  void
  no (const no_type& x);

  void
  no (const no_optional& x);

  // Constructors.
  //
  frame ();

  frame (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  frame (const frame& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual frame*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  frame&
  operator= (const frame& x);

  virtual 
  ~frame ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  roi_sequence roi_;
  no_optional no_;
};

class roi: public ::xml_schema::string
{
  public:
  // id
  //
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::optional< id_type > id_optional;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_optional&
  id () const;

  id_optional&
  id ();

  void
  id (const id_type& x);

  void
  id (const id_optional& x);

  // x
  //
  typedef ::xml_schema::int_ x_type;
  typedef ::xsd::cxx::tree::optional< x_type > x_optional;
  typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

  const x_optional&
  x () const;

  x_optional&
  x ();

  void
  x (const x_type& x);

  void
  x (const x_optional& x);

  // y
  //
  typedef ::xml_schema::int_ y_type;
  typedef ::xsd::cxx::tree::optional< y_type > y_optional;
  typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

  const y_optional&
  y () const;

  y_optional&
  y ();

  void
  y (const y_type& x);

  void
  y (const y_optional& x);

  // brx
  //
  typedef ::xml_schema::int_ brx_type;
  typedef ::xsd::cxx::tree::optional< brx_type > brx_optional;
  typedef ::xsd::cxx::tree::traits< brx_type, char > brx_traits;

  const brx_optional&
  brx () const;

  brx_optional&
  brx ();

  void
  brx (const brx_type& x);

  void
  brx (const brx_optional& x);

  // bry
  //
  typedef ::xml_schema::int_ bry_type;
  typedef ::xsd::cxx::tree::optional< bry_type > bry_optional;
  typedef ::xsd::cxx::tree::traits< bry_type, char > bry_traits;

  const bry_optional&
  bry () const;

  bry_optional&
  bry ();

  void
  bry (const bry_type& x);

  void
  bry (const bry_optional& x);

  // w
  //
  typedef ::xml_schema::int_ w_type;
  typedef ::xsd::cxx::tree::optional< w_type > w_optional;
  typedef ::xsd::cxx::tree::traits< w_type, char > w_traits;

  const w_optional&
  w () const;

  w_optional&
  w ();

  void
  w (const w_type& x);

  void
  w (const w_optional& x);

  // h
  //
  typedef ::xml_schema::int_ h_type;
  typedef ::xsd::cxx::tree::optional< h_type > h_optional;
  typedef ::xsd::cxx::tree::traits< h_type, char > h_traits;

  const h_optional&
  h () const;

  h_optional&
  h ();

  void
  h (const h_type& x);

  void
  h (const h_optional& x);

  // weight
  //
  typedef ::xml_schema::double_ weight_type;
  typedef ::xsd::cxx::tree::optional< weight_type > weight_optional;
  typedef ::xsd::cxx::tree::traits< weight_type, char, ::xsd::cxx::tree::schema_type::double_ > weight_traits;

  const weight_optional&
  weight () const;

  weight_optional&
  weight ();

  void
  weight (const weight_type& x);

  void
  weight (const weight_optional& x);

  // labeled
  //
  typedef ::xml_schema::boolean labeled_type;
  typedef ::xsd::cxx::tree::optional< labeled_type > labeled_optional;
  typedef ::xsd::cxx::tree::traits< labeled_type, char > labeled_traits;

  const labeled_optional&
  labeled () const;

  labeled_optional&
  labeled ();

  void
  labeled (const labeled_type& x);

  void
  labeled (const labeled_optional& x);

  // label-id
  //
  typedef ::xml_schema::int_ label_id_type;
  typedef ::xsd::cxx::tree::optional< label_id_type > label_id_optional;
  typedef ::xsd::cxx::tree::traits< label_id_type, char > label_id_traits;

  const label_id_optional&
  label_id () const;

  label_id_optional&
  label_id ();

  void
  label_id (const label_id_type& x);

  void
  label_id (const label_id_optional& x);

  // label
  //
  typedef ::xml_schema::string label_type;
  typedef ::xsd::cxx::tree::optional< label_type > label_optional;
  typedef ::xsd::cxx::tree::traits< label_type, char > label_traits;

  const label_optional&
  label () const;

  label_optional&
  label ();

  void
  label (const label_type& x);

  void
  label (const label_optional& x);

  void
  label (::std::auto_ptr< label_type > p);

  // color
  //
  typedef ::xml_schema::string color_type;
  typedef ::xsd::cxx::tree::optional< color_type > color_optional;
  typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

  const color_optional&
  color () const;

  color_optional&
  color ();

  void
  color (const color_type& x);

  void
  color (const color_optional& x);

  void
  color (::std::auto_ptr< color_type > p);

  // removed
  //
  typedef ::xml_schema::boolean removed_type;
  typedef ::xsd::cxx::tree::optional< removed_type > removed_optional;
  typedef ::xsd::cxx::tree::traits< removed_type, char > removed_traits;

  const removed_optional&
  removed () const;

  removed_optional&
  removed ();

  void
  removed (const removed_type& x);

  void
  removed (const removed_optional& x);

  // automatic
  //
  typedef ::xml_schema::boolean automatic_type;
  typedef ::xsd::cxx::tree::optional< automatic_type > automatic_optional;
  typedef ::xsd::cxx::tree::traits< automatic_type, char > automatic_traits;

  const automatic_optional&
  automatic () const;

  automatic_optional&
  automatic ();

  void
  automatic (const automatic_type& x);

  void
  automatic (const automatic_optional& x);

  // Constructors.
  //
  roi ();

  roi (const char*);

  roi (const ::std::string&);

  roi (const ::xml_schema::string&);

  roi (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  roi (const roi& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  virtual roi*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  roi&
  operator= (const roi& x);

  virtual 
  ~roi ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  id_optional id_;
  x_optional x_;
  y_optional y_;
  brx_optional brx_;
  bry_optional bry_;
  w_optional w_;
  h_optional h_;
  weight_optional weight_;
  labeled_optional labeled_;
  label_id_optional label_id_;
  label_optional label_;
  color_optional color_;
  removed_optional removed_;
  automatic_optional automatic_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::gtrois >
gtrois_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtrois >
gtrois_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtrois >
gtrois_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::gtrois >
gtrois_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtrois >
gtrois_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtrois >
gtrois_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtrois >
gtrois_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtrois >
gtrois_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtrois >
gtrois_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::gtrois >
gtrois_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtrois >
gtrois_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtrois >
gtrois_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::gtrois >
gtrois_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtrois >
gtrois_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

// Serialize to std::ostream.
//

void
gtrois_ (::std::ostream& os,
         const ::gtrois& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
gtrois_ (::std::ostream& os,
         const ::gtrois& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
gtrois_ (::std::ostream& os,
         const ::gtrois& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
gtrois_ (::xercesc::XMLFormatTarget& ft,
         const ::gtrois& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
gtrois_ (::xercesc::XMLFormatTarget& ft,
         const ::gtrois& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
gtrois_ (::xercesc::XMLFormatTarget& ft,
         const ::gtrois& x, 
         ::xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
gtrois_ (::xercesc::DOMDocument& d,
         const ::gtrois& x,
         ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
gtrois_ (const ::gtrois& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const gtrois&);

void
operator<< (::xercesc::DOMElement&, const frame&);

void
operator<< (::xercesc::DOMElement&, const roi&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XML_ROIS_HXX
