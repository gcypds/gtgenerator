// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "rois.hxx"

// gtrois
// 

const gtrois::frame_sequence& gtrois::
frame () const
{
  return this->frame_;
}

gtrois::frame_sequence& gtrois::
frame ()
{
  return this->frame_;
}

void gtrois::
frame (const frame_sequence& s)
{
  this->frame_ = s;
}

const gtrois::fversion_optional& gtrois::
fversion () const
{
  return this->fversion_;
}

gtrois::fversion_optional& gtrois::
fversion ()
{
  return this->fversion_;
}

void gtrois::
fversion (const fversion_type& x)
{
  this->fversion_.set (x);
}

void gtrois::
fversion (const fversion_optional& x)
{
  this->fversion_ = x;
}

void gtrois::
fversion (::std::auto_ptr< fversion_type > x)
{
  this->fversion_.set (x);
}

const gtrois::algorithm_optional& gtrois::
algorithm () const
{
  return this->algorithm_;
}

gtrois::algorithm_optional& gtrois::
algorithm ()
{
  return this->algorithm_;
}

void gtrois::
algorithm (const algorithm_type& x)
{
  this->algorithm_.set (x);
}

void gtrois::
algorithm (const algorithm_optional& x)
{
  this->algorithm_ = x;
}

void gtrois::
algorithm (::std::auto_ptr< algorithm_type > x)
{
  this->algorithm_.set (x);
}

const gtrois::name_optional& gtrois::
name () const
{
  return this->name_;
}

gtrois::name_optional& gtrois::
name ()
{
  return this->name_;
}

void gtrois::
name (const name_type& x)
{
  this->name_.set (x);
}

void gtrois::
name (const name_optional& x)
{
  this->name_ = x;
}

void gtrois::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const gtrois::video_name_optional& gtrois::
video_name () const
{
  return this->video_name_;
}

gtrois::video_name_optional& gtrois::
video_name ()
{
  return this->video_name_;
}

void gtrois::
video_name (const video_name_type& x)
{
  this->video_name_.set (x);
}

void gtrois::
video_name (const video_name_optional& x)
{
  this->video_name_ = x;
}

void gtrois::
video_name (::std::auto_ptr< video_name_type > x)
{
  this->video_name_.set (x);
}

const gtrois::padding_px_optional& gtrois::
padding_px () const
{
  return this->padding_px_;
}

gtrois::padding_px_optional& gtrois::
padding_px ()
{
  return this->padding_px_;
}

void gtrois::
padding_px (const padding_px_type& x)
{
  this->padding_px_.set (x);
}

void gtrois::
padding_px (const padding_px_optional& x)
{
  this->padding_px_ = x;
}


// frame
// 

const frame::roi_sequence& frame::
roi () const
{
  return this->roi_;
}

frame::roi_sequence& frame::
roi ()
{
  return this->roi_;
}

void frame::
roi (const roi_sequence& s)
{
  this->roi_ = s;
}

const frame::no_optional& frame::
no () const
{
  return this->no_;
}

frame::no_optional& frame::
no ()
{
  return this->no_;
}

void frame::
no (const no_type& x)
{
  this->no_.set (x);
}

void frame::
no (const no_optional& x)
{
  this->no_ = x;
}


// roi
// 

const roi::id_optional& roi::
id () const
{
  return this->id_;
}

roi::id_optional& roi::
id ()
{
  return this->id_;
}

void roi::
id (const id_type& x)
{
  this->id_.set (x);
}

void roi::
id (const id_optional& x)
{
  this->id_ = x;
}

const roi::x_optional& roi::
x () const
{
  return this->x_;
}

roi::x_optional& roi::
x ()
{
  return this->x_;
}

void roi::
x (const x_type& x)
{
  this->x_.set (x);
}

void roi::
x (const x_optional& x)
{
  this->x_ = x;
}

const roi::y_optional& roi::
y () const
{
  return this->y_;
}

roi::y_optional& roi::
y ()
{
  return this->y_;
}

void roi::
y (const y_type& x)
{
  this->y_.set (x);
}

void roi::
y (const y_optional& x)
{
  this->y_ = x;
}

const roi::brx_optional& roi::
brx () const
{
  return this->brx_;
}

roi::brx_optional& roi::
brx ()
{
  return this->brx_;
}

void roi::
brx (const brx_type& x)
{
  this->brx_.set (x);
}

void roi::
brx (const brx_optional& x)
{
  this->brx_ = x;
}

const roi::bry_optional& roi::
bry () const
{
  return this->bry_;
}

roi::bry_optional& roi::
bry ()
{
  return this->bry_;
}

void roi::
bry (const bry_type& x)
{
  this->bry_.set (x);
}

void roi::
bry (const bry_optional& x)
{
  this->bry_ = x;
}

const roi::w_optional& roi::
w () const
{
  return this->w_;
}

roi::w_optional& roi::
w ()
{
  return this->w_;
}

void roi::
w (const w_type& x)
{
  this->w_.set (x);
}

void roi::
w (const w_optional& x)
{
  this->w_ = x;
}

const roi::h_optional& roi::
h () const
{
  return this->h_;
}

roi::h_optional& roi::
h ()
{
  return this->h_;
}

void roi::
h (const h_type& x)
{
  this->h_.set (x);
}

void roi::
h (const h_optional& x)
{
  this->h_ = x;
}

const roi::weight_optional& roi::
weight () const
{
  return this->weight_;
}

roi::weight_optional& roi::
weight ()
{
  return this->weight_;
}

void roi::
weight (const weight_type& x)
{
  this->weight_.set (x);
}

void roi::
weight (const weight_optional& x)
{
  this->weight_ = x;
}

const roi::labeled_optional& roi::
labeled () const
{
  return this->labeled_;
}

roi::labeled_optional& roi::
labeled ()
{
  return this->labeled_;
}

void roi::
labeled (const labeled_type& x)
{
  this->labeled_.set (x);
}

void roi::
labeled (const labeled_optional& x)
{
  this->labeled_ = x;
}

const roi::label_id_optional& roi::
label_id () const
{
  return this->label_id_;
}

roi::label_id_optional& roi::
label_id ()
{
  return this->label_id_;
}

void roi::
label_id (const label_id_type& x)
{
  this->label_id_.set (x);
}

void roi::
label_id (const label_id_optional& x)
{
  this->label_id_ = x;
}

const roi::label_optional& roi::
label () const
{
  return this->label_;
}

roi::label_optional& roi::
label ()
{
  return this->label_;
}

void roi::
label (const label_type& x)
{
  this->label_.set (x);
}

void roi::
label (const label_optional& x)
{
  this->label_ = x;
}

void roi::
label (::std::auto_ptr< label_type > x)
{
  this->label_.set (x);
}

const roi::color_optional& roi::
color () const
{
  return this->color_;
}

roi::color_optional& roi::
color ()
{
  return this->color_;
}

void roi::
color (const color_type& x)
{
  this->color_.set (x);
}

void roi::
color (const color_optional& x)
{
  this->color_ = x;
}

void roi::
color (::std::auto_ptr< color_type > x)
{
  this->color_.set (x);
}

const roi::removed_optional& roi::
removed () const
{
  return this->removed_;
}

roi::removed_optional& roi::
removed ()
{
  return this->removed_;
}

void roi::
removed (const removed_type& x)
{
  this->removed_.set (x);
}

void roi::
removed (const removed_optional& x)
{
  this->removed_ = x;
}

const roi::automatic_optional& roi::
automatic () const
{
  return this->automatic_;
}

roi::automatic_optional& roi::
automatic ()
{
  return this->automatic_;
}

void roi::
automatic (const automatic_type& x)
{
  this->automatic_.set (x);
}

void roi::
automatic (const automatic_optional& x)
{
  this->automatic_ = x;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// gtrois
//

gtrois::
gtrois ()
: ::xml_schema::type (),
  frame_ (this),
  fversion_ (this),
  algorithm_ (this),
  name_ (this),
  video_name_ (this),
  padding_px_ (this)
{
}

gtrois::
gtrois (const gtrois& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  frame_ (x.frame_, f, this),
  fversion_ (x.fversion_, f, this),
  algorithm_ (x.algorithm_, f, this),
  name_ (x.name_, f, this),
  video_name_ (x.video_name_, f, this),
  padding_px_ (x.padding_px_, f, this)
{
}

gtrois::
gtrois (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  frame_ (this),
  fversion_ (this),
  algorithm_ (this),
  name_ (this),
  video_name_ (this),
  padding_px_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void gtrois::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // frame
    //
    if (n.name () == "frame" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< frame_type > r (
        frame_traits::create (i, f, this));

      this->frame_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "fversion" && n.namespace_ ().empty ())
    {
      this->fversion_.set (fversion_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "algorithm" && n.namespace_ ().empty ())
    {
      this->algorithm_.set (algorithm_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (name_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "video_name" && n.namespace_ ().empty ())
    {
      this->video_name_.set (video_name_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "padding_px" && n.namespace_ ().empty ())
    {
      this->padding_px_.set (padding_px_traits::create (i, f, this));
      continue;
    }
  }
}

gtrois* gtrois::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class gtrois (*this, f, c);
}

gtrois& gtrois::
operator= (const gtrois& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->frame_ = x.frame_;
    this->fversion_ = x.fversion_;
    this->algorithm_ = x.algorithm_;
    this->name_ = x.name_;
    this->video_name_ = x.video_name_;
    this->padding_px_ = x.padding_px_;
  }

  return *this;
}

gtrois::
~gtrois ()
{
}

// frame
//

frame::
frame ()
: ::xml_schema::type (),
  roi_ (this),
  no_ (this)
{
}

frame::
frame (const frame& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  roi_ (x.roi_, f, this),
  no_ (x.no_, f, this)
{
}

frame::
frame (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  roi_ (this),
  no_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void frame::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // roi
    //
    if (n.name () == "roi" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< roi_type > r (
        roi_traits::create (i, f, this));

      this->roi_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "no" && n.namespace_ ().empty ())
    {
      this->no_.set (no_traits::create (i, f, this));
      continue;
    }
  }
}

frame* frame::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class frame (*this, f, c);
}

frame& frame::
operator= (const frame& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->roi_ = x.roi_;
    this->no_ = x.no_;
  }

  return *this;
}

frame::
~frame ()
{
}

// roi
//

roi::
roi ()
: ::xml_schema::string (),
  id_ (this),
  x_ (this),
  y_ (this),
  brx_ (this),
  bry_ (this),
  w_ (this),
  h_ (this),
  weight_ (this),
  labeled_ (this),
  label_id_ (this),
  label_ (this),
  color_ (this),
  removed_ (this),
  automatic_ (this)
{
}

roi::
roi (const char* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base),
  id_ (this),
  x_ (this),
  y_ (this),
  brx_ (this),
  bry_ (this),
  w_ (this),
  h_ (this),
  weight_ (this),
  labeled_ (this),
  label_id_ (this),
  label_ (this),
  color_ (this),
  removed_ (this),
  automatic_ (this)
{
}

roi::
roi (const ::std::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base),
  id_ (this),
  x_ (this),
  y_ (this),
  brx_ (this),
  bry_ (this),
  w_ (this),
  h_ (this),
  weight_ (this),
  labeled_ (this),
  label_id_ (this),
  label_ (this),
  color_ (this),
  removed_ (this),
  automatic_ (this)
{
}

roi::
roi (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base),
  id_ (this),
  x_ (this),
  y_ (this),
  brx_ (this),
  bry_ (this),
  w_ (this),
  h_ (this),
  weight_ (this),
  labeled_ (this),
  label_id_ (this),
  label_ (this),
  color_ (this),
  removed_ (this),
  automatic_ (this)
{
}

roi::
roi (const roi& x,
     ::xml_schema::flags f,
     ::xml_schema::container* c)
: ::xml_schema::string (x, f, c),
  id_ (x.id_, f, this),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  brx_ (x.brx_, f, this),
  bry_ (x.bry_, f, this),
  w_ (x.w_, f, this),
  h_ (x.h_, f, this),
  weight_ (x.weight_, f, this),
  labeled_ (x.labeled_, f, this),
  label_id_ (x.label_id_, f, this),
  label_ (x.label_, f, this),
  color_ (x.color_, f, this),
  removed_ (x.removed_, f, this),
  automatic_ (x.automatic_, f, this)
{
}

roi::
roi (const ::xercesc::DOMElement& e,
     ::xml_schema::flags f,
     ::xml_schema::container* c)
: ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
  id_ (this),
  x_ (this),
  y_ (this),
  brx_ (this),
  bry_ (this),
  w_ (this),
  h_ (this),
  weight_ (this),
  labeled_ (this),
  label_id_ (this),
  label_ (this),
  color_ (this),
  removed_ (this),
  automatic_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void roi::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "id" && n.namespace_ ().empty ())
    {
      this->id_.set (id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      this->x_.set (x_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      this->y_.set (y_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "brx" && n.namespace_ ().empty ())
    {
      this->brx_.set (brx_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "bry" && n.namespace_ ().empty ())
    {
      this->bry_.set (bry_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "w" && n.namespace_ ().empty ())
    {
      this->w_.set (w_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "h" && n.namespace_ ().empty ())
    {
      this->h_.set (h_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "weight" && n.namespace_ ().empty ())
    {
      this->weight_.set (weight_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "labeled" && n.namespace_ ().empty ())
    {
      this->labeled_.set (labeled_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "label-id" && n.namespace_ ().empty ())
    {
      this->label_id_.set (label_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "label" && n.namespace_ ().empty ())
    {
      this->label_.set (label_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "color" && n.namespace_ ().empty ())
    {
      this->color_.set (color_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "removed" && n.namespace_ ().empty ())
    {
      this->removed_.set (removed_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "automatic" && n.namespace_ ().empty ())
    {
      this->automatic_.set (automatic_traits::create (i, f, this));
      continue;
    }
  }
}

roi* roi::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class roi (*this, f, c);
}

roi& roi::
operator= (const roi& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::string& > (*this) = x;
    this->id_ = x.id_;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->brx_ = x.brx_;
    this->bry_ = x.bry_;
    this->w_ = x.w_;
    this->h_ = x.h_;
    this->weight_ = x.weight_;
    this->labeled_ = x.labeled_;
    this->label_id_ = x.label_id_;
    this->label_ = x.label_;
    this->color_ = x.color_;
    this->removed_ = x.removed_;
    this->automatic_ = x.automatic_;
  }

  return *this;
}

roi::
~roi ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::gtrois >
gtrois_ (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::gtrois > (
    ::gtrois_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::gtrois >
gtrois_ (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::gtrois > (
    ::gtrois_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::gtrois >
gtrois_ (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::gtrois > (
    ::gtrois_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::gtrois >
gtrois_ (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::gtrois_ (isrc, f, p);
}

::std::auto_ptr< ::gtrois >
gtrois_ (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::gtrois_ (isrc, h, f, p);
}

::std::auto_ptr< ::gtrois >
gtrois_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::gtrois_ (isrc, h, f, p);
}

::std::auto_ptr< ::gtrois >
gtrois_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::gtrois_ (isrc, f, p);
}

::std::auto_ptr< ::gtrois >
gtrois_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::gtrois_ (isrc, h, f, p);
}

::std::auto_ptr< ::gtrois >
gtrois_ (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::gtrois_ (isrc, h, f, p);
}

::std::auto_ptr< ::gtrois >
gtrois_ (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::gtrois > (
    ::gtrois_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::gtrois >
gtrois_ (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::gtrois > (
    ::gtrois_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::gtrois >
gtrois_ (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::gtrois > (
    ::gtrois_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::gtrois >
gtrois_ (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::gtrois > (
      ::gtrois_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "gtrois" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::gtrois > r (
      ::xsd::cxx::tree::traits< ::gtrois, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "gtrois",
    "");
}

::std::auto_ptr< ::gtrois >
gtrois_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "gtrois" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::gtrois > r (
      ::xsd::cxx::tree::traits< ::gtrois, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "gtrois",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
gtrois_ (::std::ostream& o,
         const ::gtrois& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::gtrois_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
gtrois_ (::std::ostream& o,
         const ::gtrois& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::gtrois_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
gtrois_ (::std::ostream& o,
         const ::gtrois& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::gtrois_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
gtrois_ (::xercesc::XMLFormatTarget& t,
         const ::gtrois& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::gtrois_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
gtrois_ (::xercesc::XMLFormatTarget& t,
         const ::gtrois& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::gtrois_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
gtrois_ (::xercesc::XMLFormatTarget& t,
         const ::gtrois& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::gtrois_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
gtrois_ (::xercesc::DOMDocument& d,
         const ::gtrois& s,
         ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "gtrois" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "gtrois",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
gtrois_ (const ::gtrois& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "gtrois",
      "",
      m, f));

  ::gtrois_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const gtrois& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // frame
  //
  for (gtrois::frame_const_iterator
       b (i.frame ().begin ()), n (i.frame ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "frame",
        e));

    s << *b;
  }

  // fversion
  //
  if (i.fversion ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "fversion",
        e));

    a << *i.fversion ();
  }

  // algorithm
  //
  if (i.algorithm ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "algorithm",
        e));

    a << *i.algorithm ();
  }

  // name
  //
  if (i.name ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << *i.name ();
  }

  // video_name
  //
  if (i.video_name ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "video_name",
        e));

    a << *i.video_name ();
  }

  // padding_px
  //
  if (i.padding_px ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "padding_px",
        e));

    a << *i.padding_px ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const frame& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // roi
  //
  for (frame::roi_const_iterator
       b (i.roi ().begin ()), n (i.roi ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "roi",
        e));

    s << *b;
  }

  // no
  //
  if (i.no ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "no",
        e));

    a << *i.no ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const roi& i)
{
  e << static_cast< const ::xml_schema::string& > (i);

  // id
  //
  if (i.id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "id",
        e));

    a << *i.id ();
  }

  // x
  //
  if (i.x ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "x",
        e));

    a << *i.x ();
  }

  // y
  //
  if (i.y ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "y",
        e));

    a << *i.y ();
  }

  // brx
  //
  if (i.brx ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "brx",
        e));

    a << *i.brx ();
  }

  // bry
  //
  if (i.bry ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "bry",
        e));

    a << *i.bry ();
  }

  // w
  //
  if (i.w ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "w",
        e));

    a << *i.w ();
  }

  // h
  //
  if (i.h ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "h",
        e));

    a << *i.h ();
  }

  // weight
  //
  if (i.weight ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "weight",
        e));

    a << ::xml_schema::as_double(*i.weight ());
  }

  // labeled
  //
  if (i.labeled ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "labeled",
        e));

    a << *i.labeled ();
  }

  // label-id
  //
  if (i.label_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "label-id",
        e));

    a << *i.label_id ();
  }

  // label
  //
  if (i.label ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "label",
        e));

    a << *i.label ();
  }

  // color
  //
  if (i.color ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "color",
        e));

    a << *i.color ();
  }

  // removed
  //
  if (i.removed ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "removed",
        e));

    a << *i.removed ();
  }

  // automatic
  //
  if (i.automatic ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "automatic",
        e));

    a << *i.automatic ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

