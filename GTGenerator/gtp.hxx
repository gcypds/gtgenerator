// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XML_GTP_HXX
#define XML_GTP_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class gtproj;
class proj;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class gtproj: public ::xml_schema::type
{
  public:
  // proj
  //
  typedef ::proj proj_type;
  typedef ::xsd::cxx::tree::sequence< proj_type > proj_sequence;
  typedef proj_sequence::iterator proj_iterator;
  typedef proj_sequence::const_iterator proj_const_iterator;
  typedef ::xsd::cxx::tree::traits< proj_type, char > proj_traits;

  const proj_sequence&
  proj () const;

  proj_sequence&
  proj ();

  void
  proj (const proj_sequence& s);

  // fversion
  //
  typedef ::xml_schema::string fversion_type;
  typedef ::xsd::cxx::tree::optional< fversion_type > fversion_optional;
  typedef ::xsd::cxx::tree::traits< fversion_type, char > fversion_traits;

  const fversion_optional&
  fversion () const;

  fversion_optional&
  fversion ();

  void
  fversion (const fversion_type& x);

  void
  fversion (const fversion_optional& x);

  void
  fversion (::std::auto_ptr< fversion_type > p);

  // Constructors.
  //
  gtproj ();

  gtproj (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  gtproj (const gtproj& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual gtproj*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  gtproj&
  operator= (const gtproj& x);

  virtual 
  ~gtproj ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  proj_sequence proj_;
  fversion_optional fversion_;
};

class proj: public ::xml_schema::string
{
  public:
  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::optional< name_type > name_optional;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_optional&
  name () const;

  name_optional&
  name ();

  void
  name (const name_type& x);

  void
  name (const name_optional& x);

  void
  name (::std::auto_ptr< name_type > p);

  // frame_count
  //
  typedef ::xml_schema::byte frame_count_type;
  typedef ::xsd::cxx::tree::optional< frame_count_type > frame_count_optional;
  typedef ::xsd::cxx::tree::traits< frame_count_type, char > frame_count_traits;

  const frame_count_optional&
  frame_count () const;

  frame_count_optional&
  frame_count ();

  void
  frame_count (const frame_count_type& x);

  void
  frame_count (const frame_count_optional& x);

  // label_count
  //
  typedef ::xml_schema::byte label_count_type;
  typedef ::xsd::cxx::tree::optional< label_count_type > label_count_optional;
  typedef ::xsd::cxx::tree::traits< label_count_type, char > label_count_traits;

  const label_count_optional&
  label_count () const;

  label_count_optional&
  label_count ();

  void
  label_count (const label_count_type& x);

  void
  label_count (const label_count_optional& x);

  // video_source_path
  //
  typedef ::xml_schema::string video_source_path_type;
  typedef ::xsd::cxx::tree::optional< video_source_path_type > video_source_path_optional;
  typedef ::xsd::cxx::tree::traits< video_source_path_type, char > video_source_path_traits;

  const video_source_path_optional&
  video_source_path () const;

  video_source_path_optional&
  video_source_path ();

  void
  video_source_path (const video_source_path_type& x);

  void
  video_source_path (const video_source_path_optional& x);

  void
  video_source_path (::std::auto_ptr< video_source_path_type > p);

  // subsampling_enabled
  //
  typedef ::xml_schema::boolean subsampling_enabled_type;
  typedef ::xsd::cxx::tree::optional< subsampling_enabled_type > subsampling_enabled_optional;
  typedef ::xsd::cxx::tree::traits< subsampling_enabled_type, char > subsampling_enabled_traits;

  const subsampling_enabled_optional&
  subsampling_enabled () const;

  subsampling_enabled_optional&
  subsampling_enabled ();

  void
  subsampling_enabled (const subsampling_enabled_type& x);

  void
  subsampling_enabled (const subsampling_enabled_optional& x);

  // subsampling_value
  //
  typedef ::xml_schema::byte subsampling_value_type;
  typedef ::xsd::cxx::tree::optional< subsampling_value_type > subsampling_value_optional;
  typedef ::xsd::cxx::tree::traits< subsampling_value_type, char > subsampling_value_traits;

  const subsampling_value_optional&
  subsampling_value () const;

  subsampling_value_optional&
  subsampling_value ();

  void
  subsampling_value (const subsampling_value_type& x);

  void
  subsampling_value (const subsampling_value_optional& x);

  // subsampling_step
  //
  typedef ::xml_schema::byte subsampling_step_type;
  typedef ::xsd::cxx::tree::optional< subsampling_step_type > subsampling_step_optional;
  typedef ::xsd::cxx::tree::traits< subsampling_step_type, char > subsampling_step_traits;

  const subsampling_step_optional&
  subsampling_step () const;

  subsampling_step_optional&
  subsampling_step ();

  void
  subsampling_step (const subsampling_step_type& x);

  void
  subsampling_step (const subsampling_step_optional& x);

  // bgs_iterations
  //
  typedef ::xml_schema::byte bgs_iterations_type;
  typedef ::xsd::cxx::tree::optional< bgs_iterations_type > bgs_iterations_optional;
  typedef ::xsd::cxx::tree::traits< bgs_iterations_type, char > bgs_iterations_traits;

  const bgs_iterations_optional&
  bgs_iterations () const;

  bgs_iterations_optional&
  bgs_iterations ();

  void
  bgs_iterations (const bgs_iterations_type& x);

  void
  bgs_iterations (const bgs_iterations_optional& x);

  // bgs_loaded
  //
  typedef ::xml_schema::boolean bgs_loaded_type;
  typedef ::xsd::cxx::tree::optional< bgs_loaded_type > bgs_loaded_optional;
  typedef ::xsd::cxx::tree::traits< bgs_loaded_type, char > bgs_loaded_traits;

  const bgs_loaded_optional&
  bgs_loaded () const;

  bgs_loaded_optional&
  bgs_loaded ();

  void
  bgs_loaded (const bgs_loaded_type& x);

  void
  bgs_loaded (const bgs_loaded_optional& x);

  // bgs_computed
  //
  typedef ::xml_schema::boolean bgs_computed_type;
  typedef ::xsd::cxx::tree::optional< bgs_computed_type > bgs_computed_optional;
  typedef ::xsd::cxx::tree::traits< bgs_computed_type, char > bgs_computed_traits;

  const bgs_computed_optional&
  bgs_computed () const;

  bgs_computed_optional&
  bgs_computed ();

  void
  bgs_computed (const bgs_computed_type& x);

  void
  bgs_computed (const bgs_computed_optional& x);

  // descriptors_computed
  //
  typedef ::xml_schema::boolean descriptors_computed_type;
  typedef ::xsd::cxx::tree::optional< descriptors_computed_type > descriptors_computed_optional;
  typedef ::xsd::cxx::tree::traits< descriptors_computed_type, char > descriptors_computed_traits;

  const descriptors_computed_optional&
  descriptors_computed () const;

  descriptors_computed_optional&
  descriptors_computed ();

  void
  descriptors_computed (const descriptors_computed_type& x);

  void
  descriptors_computed (const descriptors_computed_optional& x);

  // labels_created
  //
  typedef ::xml_schema::boolean labels_created_type;
  typedef ::xsd::cxx::tree::optional< labels_created_type > labels_created_optional;
  typedef ::xsd::cxx::tree::traits< labels_created_type, char > labels_created_traits;

  const labels_created_optional&
  labels_created () const;

  labels_created_optional&
  labels_created ();

  void
  labels_created (const labels_created_type& x);

  void
  labels_created (const labels_created_optional& x);

  // rois_created
  //
  typedef ::xml_schema::boolean rois_created_type;
  typedef ::xsd::cxx::tree::optional< rois_created_type > rois_created_optional;
  typedef ::xsd::cxx::tree::traits< rois_created_type, char > rois_created_traits;

  const rois_created_optional&
  rois_created () const;

  rois_created_optional&
  rois_created ();

  void
  rois_created (const rois_created_type& x);

  void
  rois_created (const rois_created_optional& x);

  // Constructors.
  //
  proj ();

  proj (const char*);

  proj (const ::std::string&);

  proj (const ::xml_schema::string&);

  proj (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  proj (const proj& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual proj*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  proj&
  operator= (const proj& x);

  virtual 
  ~proj ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  name_optional name_;
  frame_count_optional frame_count_;
  label_count_optional label_count_;
  video_source_path_optional video_source_path_;
  subsampling_enabled_optional subsampling_enabled_;
  subsampling_value_optional subsampling_value_;
  subsampling_step_optional subsampling_step_;
  bgs_iterations_optional bgs_iterations_;
  bgs_loaded_optional bgs_loaded_;
  bgs_computed_optional bgs_computed_;
  descriptors_computed_optional descriptors_computed_;
  labels_created_optional labels_created_;
  rois_created_optional rois_created_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::gtproj >
gtproj_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtproj >
gtproj_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtproj >
gtproj_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::gtproj >
gtproj_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtproj >
gtproj_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtproj >
gtproj_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtproj >
gtproj_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtproj >
gtproj_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtproj >
gtproj_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::gtproj >
gtproj_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtproj >
gtproj_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtproj >
gtproj_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::gtproj >
gtproj_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::gtproj >
gtproj_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XML_GTP_HXX
